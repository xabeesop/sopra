{
  "stats": {
    "suites": 1,
    "tests": 2,
    "passes": 2,
    "pending": 0,
    "failures": 0,
    "start": "2023-03-12T17:50:39.844Z",
    "end": "2023-03-12T17:50:50.862Z",
    "duration": 11018,
    "testsRegistered": 2,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "7064c620-da35-486b-8730-1fed643fd7a5",
      "title": "",
      "fullFile": "cypress/e2e/sopra.cy.js",
      "file": "cypress/e2e/sopra.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "d04492d4-5a4c-4738-b541-a374c0739a0f",
          "title": "Google search Apple",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Positive - over 1000000",
              "fullTitle": "Google search Apple Positive - over 1000000",
              "timedOut": null,
              "duration": 5151,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get('div[id=\"result-stats\"]').contains(\"results (\");\ncy.get('div[id=\"result-stats\"]').contains(\"000,000\");\ncy.get('div[id=\"result-stats\"]').invoke('text').then(text => {\n  let fullText = text.toString();\n  let cutText = text.toString().replace(\"About \", \"\").split(\" results (\");\n  let pattern = /[0-9]+/g;\n  var number = cutText[0].match(pattern);\n  cy.log(\"--------------------------------------------------> Full Text: \" + fullText);\n  cy.log(\"--------------------------------------------------> Cut Text: \" + cutText);\n  let results = cutText[0].replaceAll(\",\", \"\").match(pattern); // finally supress ,\n  cy.log(\"=================================================>> RESULTS: \" + results);\n  cy.log(\"type: \" + typeof Number(results));\n  expect(parseInt(results)).to.be.greaterThan(1000000);\n});",
              "err": {},
              "uuid": "f5da9646-b67d-4945-abcc-8d83f5066db6",
              "parentUUID": "d04492d4-5a4c-4738-b541-a374c0739a0f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Negative - not under 10000",
              "fullTitle": "Google search Apple Negative - not under 10000",
              "timedOut": null,
              "duration": 4326,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get('div[id=\"result-stats\"]').contains(\"results (\");\ncy.get('div[id=\"result-stats\"]').contains(\"000,000\");\ncy.get('div[id=\"result-stats\"]').invoke('text').then(text => {\n  let fullText = text.toString();\n  let cutText = text.toString().replace(\"About \", \"\").split(\" results (\");\n  let pattern = /[0-9]+/g;\n  cy.log(\"--------------------------------------------------> Full Text: \" + fullText);\n  cy.log(\"--------------------------------------------------> Cut Text: \" + cutText[0]);\n  let results = cutText[0].replaceAll(\",\", \"\").match(pattern); // finally supress ,\n  cy.log(\"=================================================>> RESULTS: \" + results);\n  cy.log(\"type: \" + typeof Number(results));\n  expect(parseInt(results)).not.to.be.lessThan(10000);\n});",
              "err": {},
              "uuid": "47129fc2-bce0-4830-b90c-6ec5c48115b4",
              "parentUUID": "d04492d4-5a4c-4738-b541-a374c0739a0f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f5da9646-b67d-4945-abcc-8d83f5066db6",
            "47129fc2-bce0-4830-b90c-6ec5c48115b4"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 9477,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "charts": true,
        "reportPageTitle": "sopra",
        "embeddedScreenshots": true,
        "inlineAssets": true,
        "saveAllAttempts": true,
        "overwrite": false,
        "html": true,
        "json": true,
        "reportDir": "report/mochawesome-report"
      },
      "version": "6.2.0"
    }
  }
}